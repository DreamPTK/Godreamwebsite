{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Extract_data/","title":"Extract by point","text":"<p>Extract data of raster image from points</p>"},{"location":"Extract_data/#import-package","title":"Import package","text":"<pre><code>import geopandas as gpd\nfrom Godream.geobox import extract_by_point\nfrom Godream.plotimg import overlay_map\n</code></pre>"},{"location":"Extract_data/#explore-input-data","title":"Explore Input data","text":"<pre><code>raster = 'D:/DGEO/data/S2_image3.tif'\npoints = 'D:/DGEO/data/ppoint.geojson'\noutput_vector = 'D:/DGEO/data/ppoint_1.geojson'\n</code></pre> <pre><code>gdf = gpd.read_file(points)\ngdf.head()\n</code></pre> geometry 0 POINT (100.38786 13.99795) 1 POINT (100.42939 14.00995) 2 POINT (100.41725 14.03318) 3 POINT (100.38942 14.01469) 4 POINT (100.36727 14.02073) <pre><code># display input file on interative map\noverlay_map(vector_file= [points], raster_file=[raster])\n</code></pre>"},{"location":"Extract_data/#extract-data-by-points","title":"Extract data by points","text":"<pre><code>extract_by_point(raster, points, output_vector)\n</code></pre> geometry band_1 band_2 band_3 band_4 0 POINT (100.38786 13.99795) 569.0 956.0 1062.0 2796.0 1 POINT (100.42939 14.00995) 659.0 1018.0 1086.0 3080.0 2 POINT (100.41725 14.03318) 606.0 967.0 1078.0 3102.0 3 POINT (100.38942 14.01469) 641.0 988.0 1078.0 2954.0 4 POINT (100.36727 14.02073) 766.0 1047.0 1146.0 2454.0 5 POINT (100.37963 14.01217) 597.0 942.0 1075.0 3165.0 6 POINT (100.36129 13.99269) 703.0 1090.0 1126.0 3046.0 7 POINT (100.39729 13.97719) 771.0 1085.0 1174.0 2787.0 8 POINT (100.37916 13.96268) 635.0 973.0 1113.0 3142.0 9 POINT (100.37298 13.96574) 598.0 953.0 1077.0 2666.0"},{"location":"Extract_data/#output","title":"Output","text":"<pre><code># Read the vector \ngdf = gpd.read_file(output_vector)\n\ngdf.head()\n</code></pre> band_1 band_2 band_3 band_4 geometry 0 569.0 956.0 1062.0 2796.0 POINT (100.38786 13.99795) 1 659.0 1018.0 1086.0 3080.0 POINT (100.42939 14.00995) 2 606.0 967.0 1078.0 3102.0 POINT (100.41725 14.03318) 3 641.0 988.0 1078.0 2954.0 POINT (100.38942 14.01469) 4 766.0 1047.0 1146.0 2454.0 POINT (100.36727 14.02073)"},{"location":"Interactive_map/","title":"Interactive map","text":""},{"location":"Interactive_map/#load-package","title":"Load package","text":"<pre><code>from Godream.plotimg import show_map, overlay_map\n</code></pre>"},{"location":"Interactive_map/#show_map","title":"show_map()","text":"<p>Default location is in Thailand.</p> <p>There are Drawing tools to create vector data like point, line, ploygon in this interactive map. It can seach location by name or zoom in, zoom out, and pan on the map. In addition, This tools have XYZtile map availabe on the Top right of the map that you can change. It composes of terrain map, hybrid map and sattellite map from Google, Open Street Map, and Gistda service. </p> <pre><code>show_map()\n</code></pre> Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Can assign lat/lon or zoom level into interactive map</p> <pre><code>lat = (9.133)\nlon = (99.324)\n\nshow_map(lat, lon, zoom = 12)\n</code></pre> <p></p>"},{"location":"Interactive_map/#overlay_map","title":"overlay_map()","text":"<ul> <li>Display raster data or vector data on Interactive Map</li> </ul> <p>This tools is suitable for CRS(EPSG:4326)</p> <pre><code>raster_path=['D:\\DGEO\\data\\S2_image3.tif'] # raster\nvector_path = ['D:\\DGEO\\data\\Rectan.geojson'] # vector\n</code></pre> <pre><code># display input file on interative map\noverlay_map(vector_file=vector_path, raster_file=raster_path)\n</code></pre> <p></p> <p>OR Display only raster images / vector images</p> <pre><code>raster_paths=[\"D:\\DGEO\\data\\Landsat8_4326.TIF\",'D:\\DGEO\\data\\S2_image3.tif' ]\n\noverlay_map(raster_file=raster_paths, zoom =9)\n</code></pre> <p></p> <p><pre><code>vector_paths=['D:\\DGEO\\data\\Rectan.geojson','D:\\DGEO\\data\\Triangle.geojson' ]\n\noverlay_map(vector_file=vector_paths, zoom = 9)\n</code></pre> </p>"},{"location":"ML/","title":"ML","text":"<p>Machine Learning for Classification</p>"},{"location":"ML/#import-package","title":"Import package","text":"<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport rasterio \nimport rioxarray\nimport geopandas as gpd\nimport numpy as np\n\nfrom sklearn import model_selection\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom Godream.plotimg import overlay_map\nfrom Godream.convertool import xarray_ds, geojson_add_Newcol\nfrom Godream.geobox import extract_by_point, merge\nfrom Godream.classification import predict_xray\n</code></pre>"},{"location":"ML/#set-input","title":"Set Input","text":"<pre><code>file_name = \"data/S2_image3.tif\" # raster image file\nv1 = 'data/rice_point.geojson'   # point of rice in vector\nv2 = 'data/urban_point.geojson'  # point of urban in vector \nv3 = 'data/water_point.geojson'  # point of water in vector\nvector = [v1, v2, v3]\nfiler = [file_name]\n</code></pre>"},{"location":"ML/#display-input","title":"Display input","text":"<p>It may take several minute to display map.</p> <p>As you can see the 3 diferance type of land use in 3 vector files. That is consist of rice, urban and water.</p> <pre><code>#Visualize vector and raster files\noverlay_map(vector_file=vector , raster_file = filer, with_draw_tools=True,zoom=None )\n</code></pre> <p></p>"},{"location":"ML/#create-xarray-dataset","title":"Create Xarray dataset","text":"<p>Create Xarray dataset from raster image</p> <p>Use 'xarray_ds' to convert raster image to xarray dataset</p> <pre><code># create xarray dataset\nds = xarray_ds(tiff_path=file_name)\n</code></pre>"},{"location":"ML/#data-preparation","title":"Data preparation","text":""},{"location":"ML/#add-new-colume","title":"Add new colume","text":"<p>Add new colume to set code value to identify the type of landuse.</p> <p>The case study set new column name : \"class\".</p> <p>And value of each column was sapareted to these:</p> <p>Code 111 : padd field /      222 : Urban /      333 : water</p> <pre><code>geojson_add_Newcol('D:/DGEO/DGEO/data/water_point.geojson')\n</code></pre> <pre><code>points= 'data/rice_point.geojson'\n\ngdf = gpd.read_file(points)\ngdf.head()\n</code></pre> class geometry 0 111 POINT (100.66825 14.12306) 1 111 POINT (100.68223 14.13092) 2 111 POINT (100.58157 14.14916) 3 111 POINT (100.58988 14.15341) 4 111 POINT (100.85970 14.18962)"},{"location":"ML/#merge-file-together","title":"Merge file together","text":"<pre><code>out_trainset = 'data/trainset.geojson'\n\nmerge(vector, out_trainset )\n</code></pre> <pre><code># explore merged output\ngdf = gpd.read_file(out_trainset)\ngdf.info()\n</code></pre> <pre><code>&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 311 entries, 0 to 310\nData columns (total 2 columns):\n #   Column    Non-Null Count  Dtype   \n---  ------    --------------  -----   \n 0   class     311 non-null    int64   \n 1   geometry  311 non-null    geometry\ndtypes: geometry(1), int64(1)\nmemory usage: 5.0 KB\n</code></pre>"},{"location":"ML/#extract-raster-value-by-point","title":"Extract raster value by point","text":"<p>Use 'extract_by_point' to  extract value of each band of satellite image (raster image).</p> <p>As you can see on the output, there are the column of each band from raster image file input.</p> <pre><code># set input parameter\nraster = 'data/S2_image3.tif'\npoints = 'data/trainset.geojson'\noutput_vector = 'data/trainset_DN.geojson'\n</code></pre> <pre><code># call function to  extract value from raster file\nextract_by_point(raster, points, output_vector)\n</code></pre> class geometry band_1 band_2 band_3 band_4 0 111 POINT (100.66825 14.12306) 509.0 859.0 962.0 3781.0 1 111 POINT (100.68223 14.13092) 562.0 927.0 1019.0 1682.0 2 111 POINT (100.58157 14.14916) 573.0 938.0 1035.0 2763.0 3 111 POINT (100.58988 14.15341) 592.0 920.0 1033.0 2717.0 4 111 POINT (100.85970 14.18962) 590.0 889.0 990.0 2513.0 ... ... ... ... ... ... ... 306 333 POINT (100.59200 14.09595) 563.0 758.0 1038.0 466.0 307 333 POINT (100.90402 14.20271) 520.0 788.0 984.0 407.0 308 333 POINT (100.67575 14.17692) 526.0 758.0 980.0 620.0 309 333 POINT (100.52054 14.13157) 890.0 1214.0 1280.0 466.0 310 333 POINT (100.76937 14.13664) 451.0 726.0 956.0 401.0 <p>311 rows \u00d7 6 columns</p>"},{"location":"ML/#preprocessing-data","title":"Preprocessing data","text":"<p>set the column name to be the variable to train model</p> <pre><code># select column name\ncolumns = ['class','band_1','band_2','band_3', 'band_4']\n\n# read input\ngdf = gpd.read_file(output_vector)\n\n#set column for model input\ngdf[columns]\n\nmodel_input1 = gdf[columns]\n</code></pre> <pre><code># convert to np array\nmodel_input2 = model_input1[columns].to_numpy()\n\nprint(model_input2.dtype)\n</code></pre> <pre><code>float64\n</code></pre> <p>Our training data has multiple classes in it. However, we are only trying to predict one class (i.e. class label 111, paddy field) with this model. We therefore remove other classes from our training data by setting the label value for all other classes to 0.</p> <pre><code>model_input2[:, 0] = np.where(model_input2[:, 0] == 111, 1, 0)\n</code></pre>"},{"location":"ML/#split-data-set","title":"Split data set","text":"<p>Split data set to training data 70% and testing data 30%</p> <pre><code># Split into training and testing data\nmodel_train, model_test = model_selection.train_test_split(\n    model_input2, stratify=model_input2[:, 0], train_size=0.7, random_state=0)\nprint(\"Train shape:\", model_train.shape)\nprint(\"Test shape:\", model_test.shape)\n</code></pre> <pre><code>Train shape: (217, 5)\nTest shape: (94, 5)\n</code></pre> <p>Use a custom subset of the satellite bands loaded above to train our data, you can replace column_names[1:] with a list of selected band names (e.g. ['red', 'green', 'blue', 'nir'])</p> <pre><code># Select the variables we want to use to train our model\nmodel_variables = columns[1:]\n\n# Extract relevant indices from the processed shapefile\nmodel_col_indices = [\n    columns.index(var_name) for var_name in model_variables\n]\n</code></pre>"},{"location":"ML/#train-model","title":"Train Model","text":"<pre><code># initial the model\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n# Train model\nrf_model.fit(model_train[:, model_col_indices], model_train[:, 0])\n</code></pre> <pre>RandomForestClassifier(random_state=42)</pre>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.RandomForestClassifier<pre>RandomForestClassifier(random_state=42)</pre> <pre><code># This shows the feature importance of the input features for predicting the class labels provided\nplt.bar(x=model_variables, height=rf_model.feature_importances_)\nplt.gca().set_ylabel('Importance', labelpad=10)\nplt.gca().set_xlabel('Variable', labelpad=10)\n</code></pre> <pre><code># accuracy of the model\npredictions = rf_model.predict(model_test[:, model_col_indices])\naccuracy_score(predictions, model_test[:, 0])\n</code></pre> <pre><code>1.0\n</code></pre>"},{"location":"ML/#prediction","title":"Prediction","text":"<p>It may take several minute for classification.</p> <pre><code># Predict landcover using the trained model\npredicted = predict_xray(rf_model, input_xr=ds, clean=True)\n</code></pre>"},{"location":"ML/#plot-classified-ouput","title":"Plot classified ouput","text":"<pre><code># Set up plot\nfig, axes = plt.subplots(1, 1, figsize=(12, 6))  # Set up one subplot\n\n# Plot classified image\npredicted.Predictions.plot(ax=axes, \n               cmap='Greens', \n               add_labels=False, \n               add_colorbar=False)\n\n# Add a plot title\naxes.set_title('Classified Data')\n\n# Display the plot\nplt.show()\n</code></pre>"},{"location":"ML/#export-to-tiff","title":"Export to Tiff","text":"<pre><code># export to geotiff\npredicted.Predictions.rio.to_raster('output.tif',  \n                                    driver='GTiff', \n                                    dtype='float64', \n                                    crs = ds.geobox.crs,\n                                    )\n</code></pre>"},{"location":"Openras/","title":"Plot Raster","text":"<p>Plot raster image</p> <ul> <li>plot_raster  : plot single band raster data.</li> <li>plot_hist : plot histogram of raster data.</li> <li>plot_multibands : plot multi-bands raster data.</li> <li>overlay_map : display raster data on interactive map.</li> </ul>"},{"location":"Openras/#load-package","title":"Load package","text":"<pre><code>import rasterio\nfrom Godream.plotimg import plot_raster, plot_hist\n</code></pre> <pre><code>input_img = \"data/S2_image3.tif\"\n\nds=rasterio.open(input_img)\n</code></pre>"},{"location":"Openras/#explore-data","title":"Explore data","text":"<pre><code>ds\n</code></pre> <p> <pre><code>data = ds.read()\n</code></pre> <pre><code>dd=ds.bounds\ndd\n</code></pre> <p>BoundingBox(left=100.33732565972996, bottom=13.92514454525035, right=100.9118881154528, top=14.239105737050123)</p> <pre><code>ds.crs\n</code></pre> <p>CRS.from_epsg(4326)</p> <pre><code>ds.meta\n</code></pre> <p>{'driver': 'GTiff',  'dtype': 'uint16',  'nodata': None,  'width': 6396,  'height': 3495,  'count': 4,  'crs': CRS.from_epsg(4326),  'transform': Affine(8.983152841195215e-05, 0.0, 100.33732565972996,         0.0, -8.983152841195215e-05, 14.239105737050123)}</p> <pre><code>ds.name\n</code></pre> <p>'data/S2_image3.tif'</p>"},{"location":"Openras/#plot-single-band","title":"Plot single band","text":"<p>This tools will read and plot only first band of raster image. Thus, This tools is just suitable for image visualzation. </p> <pre><code>plot_raster(ds, title=\"Map\", adjust=True, figsize=(15,6), gamma=0.6)\n</code></pre> <p></p> <pre><code>plot_raster(ds,cmap='terrain', title=\"Image\")\n</code></pre> <p></p>"},{"location":"Openras/#plot-histogram","title":"Plot histogram","text":"<pre><code>plot_hist(ds, bins=10, title='Histogram')\n</code></pre>"},{"location":"Openras/#plot-multi-bands","title":"Plot Multi-bands","text":"<ul> <li> <p>bands : sequence of image bands (R,G,B), defualt is [3, 2, 1].</p> </li> <li> <p>brightness : The brightness of image, defualt is 0.85.</p> </li> </ul> <pre><code>from Godream.plotimg import plot_multibands\n\nraster_file = \"D:\\DGEO\\data\\S2_image3.tif\"\nplot_multibands(raster_file, bands =[3,2,1], brightness=0.90)\n</code></pre> <p></p>"},{"location":"Openras/#export-raster","title":"Export raster","text":"<pre><code>with rasterio.open(r\"D:\\DGEO\\output\\output.tif\",'w', \n                   driver= ds.driver,\n                   height=ds.height,\n                   width=ds.width,\n                   count=ds.count,\n                   crs=ds.crs,\n                   transform=ds.transform,\n                   dtype=data.dtype\n                   ) as dst:\n    dst.write(data)\n</code></pre>"},{"location":"Openras/#display-raster-image","title":"Display raster image","text":"<p>This tools can show both raster and vector data on Interactive Map.</p> <p>The CRS of this tools is EPSG:4326.</p> <pre><code>from Godream.plotimg import overlay_map\n</code></pre> <pre><code># set path to be input\ninput_path='D:\\DGEO\\data\\S2_image3.tif'\nclip_path = 'D:\\DGEO\\data\\Rectan.geojson'\noutput_path= 'D:\\DGEO\\data\\Raster_clip.tif'\n# set parameter for function\nfilev = [clip_path]\nfiler = [input_path,output_path]\n</code></pre> <pre><code>overlay_map( filev, filer, with_draw_tools=True, zoom=None, opacity = 1.0)\n</code></pre> <p></p>"},{"location":"Vectorize/","title":"Vectorize","text":"<p>This is function to convert raster image to vector file.</p>"},{"location":"Vectorize/#import-packages","title":"Import packages","text":"<pre><code>from Godream.plotimg import overlay_map\nfrom Godream.convertool import raster2polygon\n</code></pre>"},{"location":"Vectorize/#set-inputoutput-path","title":"Set input/output path","text":"<p>This input file is raster image from the classification output in ML classification</p> <pre><code>file_name ='output.tif'\nout_shp_fn = 'output.shp'\n</code></pre>"},{"location":"Vectorize/#convert-raster-to","title":"Convert raster to","text":"<p>It might take several minute to get the vector result depend on the number of polygon created.</p> <pre><code>raster2polygon(file_name, out_shp_fn, band_number=1, field_name=\"values\")\n</code></pre> <pre><code> * info: creating integer raster to Polygonize:\n   &gt;&gt; output_int.tif\nSuccess: Wrote output.shp\n</code></pre>"},{"location":"Vectorize/#explore-output","title":"Explore output","text":"<pre><code>overlay_map(vector_file=[out_shp_fn], zoom=10)\n</code></pre>"},{"location":"Vectorize/#or-display-in-arcmap-software","title":"Or display in ArcMap software","text":""},{"location":"Xarray/","title":"Xarray","text":"<p><code>Xarray</code> is a python library which simplifies working with labelled multi-dimension arrays. Xarray introduces labels in the forms of dimensions, coordinates and attributes on top of raw numpy arrays, allowing for more intitutive and concise development.</p>"},{"location":"Xarray/#xarray-dataset","title":"Xarray dataset","text":"<p>Xarray Dataset can be seen as a dictionary structure packing up the data, dimensions and attributes. Variables in a Dataset object are called DataArrays and they share dimensions with the higher level Dataset. </p>"},{"location":"Xarray/#import-packages","title":"Import packages","text":"<pre><code>from Godream.convertool import xarray_ds\n</code></pre>"},{"location":"Xarray/#input","title":"Input","text":"<pre><code>file_name = \"data/Landsat8_allB4326.tif\"\n</code></pre>"},{"location":"Xarray/#create-xarray-dataset","title":"Create Xarray dataset","text":"<p>You have to know the band ordering of your raster image or you can reordering by using stacking tool.</p> <pre><code>ds = xarray_ds(tiff_path=file_name)\n</code></pre> <pre><code>print(ds)\n</code></pre> <pre><code>&lt;xarray.Dataset&gt;\nDimensions:  (y: 1469, x: 1469)\nCoordinates:\n  * x        (x) float64 100.5 100.5 100.5 100.5 ... 100.9 100.9 100.9 100.9\n  * y        (y) float64 13.89 13.89 13.89 13.89 ... 14.29 14.29 14.29 14.29\nData variables:\n    band_1   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\n    band_2   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\n    band_3   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\n    band_4   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\n    band_5   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\n    band_6   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\n    band_7   (y, x) float64 -9.999e+03 -9.999e+03 ... -9.999e+03 -9.999e+03\nAttributes:\n    crs:        EPSG:4326\n    transform:  | 0.00, 0.00, 100.47|\\n| 0.00,-0.00, 14.29|\\n| 0.00, 0.00, 1.00|\n</code></pre> <pre><code>print(ds.band_5)\n</code></pre> <pre><code>&lt;xarray.DataArray 'band_5' (y: 1469, x: 1469)&gt;\narray([[-9999., -9999., -9999., ..., -9999., -9999., -9999.],\n       [-9999., -9999., -9999., ..., -9999., -9999., -9999.],\n       [-9999., -9999., -9999., ..., -9999., -9999., -9999.],\n       ...,\n       [-9999., -9999., -9999., ..., -9999., -9999., -9999.],\n       [-9999., -9999., -9999., ..., -9999., -9999., -9999.],\n       [-9999., -9999., -9999., ..., -9999., -9999., -9999.]])\nCoordinates:\n  * x        (x) float64 100.5 100.5 100.5 100.5 ... 100.9 100.9 100.9 100.9\n  * y        (y) float64 13.89 13.89 13.89 13.89 ... 14.29 14.29 14.29 14.29\n</code></pre> <pre><code>print(ds.crs)\n</code></pre> <pre><code>EPSG:4326\n</code></pre>"},{"location":"band_indices/","title":"Band Indices","text":"<p>There are around 10 indice available for this tools. it consist of NDVI, GNDVI, DVI, LAI, RVI, SAVI, MSAVI, NDWI, EVI, BAI.</p> <p>This tools automatic export output file in Geotiff.</p>"},{"location":"band_indices/#import-package","title":"Import package","text":"<pre><code>import rasterio\nfrom Godream.indices import cal_indinces\nfrom Godream.plotimg import plot_raster\n</code></pre>"},{"location":"band_indices/#set-file-path","title":"Set file path","text":"<pre><code># input\nfile_name = \"D:/DGEO/data/Landsat8_allB4326.tif\"\n\n#output\nout_name = \"D:/DGEO/data/Landsat8_allB4326_ndvi.tif\"\n</code></pre>"},{"location":"band_indices/#calculate-index","title":"Calculate index","text":"<p>This case study select NDVI to represent how to use the tool to create band index.</p> <p>For <code>sentinel2</code> [band2: Blue, band3: Green, band4: Red, band8: nir, band11:swir] </p> <p>For <code>landsat8</code> [band2: Blue, band3: Green, band4: Red, band5: nir, band6:swir] </p> <pre><code># use function to calculate index\nndvi = cal_indinces(tiff_path=file_name, index='NDVI', output_path=out_name, satellite = 'landsat8')\n\n# see output\nndvi\n</code></pre> <pre><code>    array([[0.69406151, 0.69681129, 0.68789144, ..., 0.51768116, 0.45603015,\n            0.4510582 ],\n           [0.69532045, 0.68777015, 0.70171026, ..., 0.52957359, 0.49478079,\n            0.46151369],\n           [0.71372453, 0.70889894, 0.69785276, ..., 0.57792041, 0.53982301,\n            0.48290598],\n           ...,\n           [0.67156741, 0.66096579, 0.60215054, ..., 0.39926471, 0.44931583,\n            0.36670688],\n           [0.66796368, 0.66885411, 0.65086765, ..., 0.39217877, 0.57319953,\n            0.48277039],\n           [0.64482482, 0.65219679, 0.6747645 , ..., 0.4274226 , 0.55710956,\n            0.53986486]])\n</code></pre>"},{"location":"band_indices/#plot-raster-output","title":"Plot raster output","text":"<p><pre><code># open file\nds=rasterio.open(out_name)\n\n# plot image\nplot_raster(ds, cmap='RdYlGn', title=\"NDVI Map\", adjust=True, figsize=(12,6), gamma=0.8)\n</code></pre> </p>"},{"location":"bandanalyze/","title":"Bands Analyze","text":"<p>This is a tutorial for creating band index manually.</p>"},{"location":"bandanalyze/#import-package","title":"Import Package","text":"<pre><code>import numpy as np\nfrom Godream.convertool import xarray_ds\nfrom Godream.plotimg import plot_raster\n</code></pre>"},{"location":"bandanalyze/#create-xarray-dataset","title":"Create xarray dataset","text":"<p>Create xarray dataset from raster image.</p> <pre><code>file_name = \"D:\\DGEO\\data\\S2_image3.tif\"\nds = xarray_ds(tiff_path=file_name)\n</code></pre> <pre><code>print(ds)\n</code></pre> <pre><code>&lt;xarray.Dataset&gt;\nDimensions:  (y: 3495, x: 6396)\nCoordinates:\n  * x        (x) float64 100.3 100.3 100.3 100.3 ... 100.9 100.9 100.9 100.9\n  * y        (y) float64 13.93 13.93 13.93 13.93 ... 14.24 14.24 14.24 14.24\nData variables:\n    band_1   (y, x) float64 577.0 580.0 598.0 619.0 ... 781.0 712.0 665.0 681.0\n    band_2   (y, x) float64 926.0 919.0 933.0 929.0 ... 957.0 942.0 928.0\n    band_3   (y, x) float64 1.045e+03 1.066e+03 1.07e+03 ... 1.093e+03 1.101e+03\n    band_4   (y, x) float64 3.195e+03 3.246e+03 ... 2.338e+03 2.279e+03\nAttributes:\n    crs:        EPSG:4326\n    transform:  | 0.00, 0.00, 100.34|\n                | 0.00,-0.00, 14.24|\n                | 0.00, 0.00, 1.00|\n</code></pre>"},{"location":"bandanalyze/#explore-dataset","title":"Explore dataset","text":"<p>band1, band2, band3, band4 represent to band red, green, blue, nir , Respectively.</p> <pre><code>print(ds.band_1)\n</code></pre> <pre><code>&lt;xarray.DataArray 'band_1' (y: 3495, x: 6396)&gt;\narray([[ 577.,  580.,  598., ...,  832.,  866.,  830.],\n       [ 599.,  614.,  593., ...,  855.,  847.,  836.],\n       [ 583.,  579.,  591., ...,  822.,  832.,  847.],\n       ...,\n       [ 659.,  674.,  703., ...,  817.,  986., 1050.],\n       [ 640.,  656.,  674., ...,  816.,  723.,  758.],\n       [ 664.,  661.,  656., ...,  712.,  665.,  681.]])\nCoordinates:\n  * x        (x) float64 100.3 100.3 100.3 100.3 ... 100.9 100.9 100.9 100.9\n  * y        (y) float64 13.93 13.93 13.93 13.93 ... 14.24 14.24 14.24 14.24\n</code></pre>"},{"location":"bandanalyze/#create-new-band-index","title":"Create new band index","text":"<p>This case study will create Normalised Difference Water Index (NDWI).</p> <p>from formular: </p> <p>NDWI = (green-nir)/(green+nir)</p> <pre><code>ndwi = (ds.band_2 - ds.band_4) / (ds.band_2 + ds.band_4)\n\nprint(ndwi)\n</code></pre> <pre><code>&lt;xarray.DataArray (y: 3495, x: 6396)&gt;\narray([[-0.55059452, -0.55870348, -0.55219582, ..., -0.46666667,\n        -0.41126332, -0.39923469],\n       [-0.56552372, -0.55311184, -0.57056639, ..., -0.4763675 ,\n        -0.44396428, -0.40887923],\n       [-0.57918552, -0.57726218, -0.55842328, ..., -0.52091067,\n        -0.48203354, -0.43473125],\n       ...,\n       [-0.5193658 , -0.50948571, -0.45927835, ..., -0.29016949,\n        -0.40574215, -0.3456057 ],\n       [-0.50832747, -0.50718031, -0.50153121, ..., -0.2952183 ,\n        -0.44366197, -0.37531646],\n       [-0.48443157, -0.49062426, -0.51581781, ..., -0.29941435,\n        -0.42560976, -0.42126598]])\nCoordinates:\n  * x        (x) float64 100.3 100.3 100.3 100.3 ... 100.9 100.9 100.9 100.9\n  * y        (y) float64 13.93 13.93 13.93 13.93 ... 14.24 14.24 14.24 14.24\n</code></pre>"},{"location":"bandanalyze/#explore-index-output","title":"Explore index output\"","text":"<pre><code># convert xarray to numpy array\nNDWI = ndwi.values\n</code></pre> <pre><code># plot image\nplot_raster(NDWI, cmap='GnBu', title= 'NDWI', adjust=True, figsize=(12,6), gamma=0.8)\n</code></pre>"},{"location":"bands_stack/","title":"Stacking","text":"<p>Band stacking or image stacking</p>"},{"location":"bands_stack/#load-package","title":"Load Package","text":"<pre><code>from Godream.geobox import stack_bands\n</code></pre>"},{"location":"bands_stack/#band-stacking","title":"Band Stacking","text":"<pre><code>band1='D:\\DGEO\\data\\L8_B1.TIF'\nband2='D:\\DGEO\\data\\L8_B2.TIF'\nband3='D:\\DGEO\\data\\L8_B3.TIF'\nband4='D:\\DGEO\\data\\L8_B4.TIF'\nband6='D:\\DGEO\\data\\L8_B6.TIF'\n</code></pre> <pre><code>band_paths =  [band1, band2, band3]\noutput_path =  \"D:\\DGEO\\data\\Landsat8_stack.TIF\"\n\nstack_bands(band_paths, output_path)\n</code></pre>"},{"location":"bands_stack/#explore-output","title":"Explore output","text":"<pre><code>import rasterio\nds= rasterio.open(\"D:\\DGEO\\data\\Landsat8_stack.TIF\") \nds\n</code></pre> <p> <pre><code>dd=ds.read()\n# dd\n</code></pre> <pre><code>ds.meta\n</code></pre> <pre><code>    {'driver': 'GTiff',\n     'dtype': 'uint16',\n     'nodata': None,\n     'width': 7551,\n     'height': 7711,\n     'count': 3,\n     'crs': CRS.from_epsg(32647),\n     'transform': Affine(30.0, 0.0, 575085.0,\n            0.0, -30.0, 1714215.0)}\n</code></pre> <p>Open in  \"overlay_map\" but need to change CRS to EPSG:4326</p> <pre><code>from Godream.plotimg import overlay_map, show_map\n</code></pre> <pre><code>path =  [\"D:\\DGEO\\data\\Landsat8_4326.TIF\"]\noverlay_map(raster_file=path)\n</code></pre> <p></p>"},{"location":"convertool/","title":"Conversion","text":"<p>Convert Tools for GIS</p> <ul> <li>convert file format from shp to geojson or geojson to shp</li> <li>convert the CRS of vector and raster file</li> </ul>"},{"location":"convertool/#import-package","title":"Import package","text":"<pre><code>import geopandas as gpd \nimport rasterio as rio\nfrom Godream.plotimg import overlay_map\nfrom Godream.convertool import convert_crs, convert_format\n</code></pre>"},{"location":"convertool/#convert-file-format","title":"Convert file format","text":"<p>This tool work for vector data to convert file formate from shp to geojson or geojson to shp.</p> <pre><code># set input/output\ninput_path = 'D:\\DGEO\\data\\Rectan.geojson'\noutput_path = 'D:\\DGEO\\data\\Rectan.shp'\noutput_format = 'ESRI Shapefile'\n</code></pre>"},{"location":"convertool/#convert-file-format-tool","title":"Convert file format Tool","text":"<p>This example, convert from <code>geojson to shp</code> file format.</p> <p>If you want to convert from <code>shp to geojson</code> format.  Please change this one:</p> <p><code>output_format = 'GeoJSON'</code></p> <p>and change <code>input_path</code> and <code>output_path</code> follow your approach.</p> <pre><code>convert_format(input_path, output_path, output_format)\n</code></pre>"},{"location":"convertool/#explore-result","title":"Explore result","text":"<pre><code># read file\ngdf = gpd.read_file(output_path)\n\nCRS_file = gdf.crs\nInfo = gdf.info()\n\nprint(CRS_file,Info)\n</code></pre> <pre><code>&lt;class 'geopandas.geodataframe.GeoDataFrame'&gt;\nRangeIndex: 1 entries, 0 to 0\nData columns (total 2 columns):\n #   Column    Non-Null Count  Dtype   \n---  ------    --------------  -----   \n 0   FID       1 non-null      int64   \n 1   geometry  1 non-null      geometry\ndtypes: geometry(1), int64(1)\nmemory usage: 144.0 bytes\nepsg:4326 None\n</code></pre>"},{"location":"convertool/#convert-crs","title":"Convert CRS","text":"<p>Convert Geographic Coodinate System(CRS)</p> <p>This example will change the crs from <code>EPSG:32647</code> to <code>EPSG:4326</code></p> <pre><code># set input/output path\ninput_path = 'D:\\DGEO\\data\\Landsat8_stack.TIF'  # Replace with the path to your input GeoTIFF file\noutput_path = 'D:\\DGEO\\data\\Landsat8_stack44.tif'  # Replace with the desired output file path\nnew_crs = 4326  # EPSG:4326\n</code></pre>"},{"location":"convertool/#explore-crs-of-file-input","title":"Explore CRS of file input","text":"<p>You can see the crs of input file is <code>EPSG:32647</code></p> <pre><code># read file\nds=rio.open(input_path)\n\n# see metedata\nds.meta\n</code></pre> <pre><code>{'driver': 'GTiff',\n 'dtype': 'uint16',\n 'nodata': None,\n 'width': 7551,\n 'height': 7711,\n 'count': 3,\n 'crs': CRS.from_epsg(32647),\n 'transform': Affine(30.0, 0.0, 575085.0,\n        0.0, -30.0, 1714215.0)}\n</code></pre>"},{"location":"convertool/#convert-crs-tool","title":"Convert CRS Tool","text":"<pre><code>convert_crs(input_path, output_path, new_crs)\n</code></pre>"},{"location":"convertool/#explore-result_1","title":"Explore result","text":"<p>Now the crs of output is <code>EPSG:4326</code></p> <pre><code># read file\nds=rio.open(output_path)\n\n# show meta data to see the result crs\nds.meta\n</code></pre> <pre><code>{'driver': 'GTiff',\n 'dtype': 'uint16',\n 'nodata': None,\n 'width': 7712,\n 'height': 7670,\n 'count': 3,\n 'crs': CRS.from_epsg(4326),\n 'transform': Affine(0.00027457111894358207, 0.0, 99.69355065482286,\n        0.0, -0.00027457111894358207, 15.504185371111015)}\n</code></pre> <pre><code>raster_path = [output_path]\noverlay_map(raster_file=raster_path, zoom=9)\n</code></pre> <p></p>"},{"location":"geoprecessing/","title":"Geoprocessing","text":"<p>Geoprocessing tools including:</p> <ul> <li>merge</li> <li>intersect</li> <li>union</li> <li>erase</li> <li>clip (!!!can work with raster)</li> <li>smc_difference</li> <li>dissolve</li> <li>buffer</li> </ul> <p>Every tools can work with vector data.</p> <p>This case study will show you Intersect tools and Clip tools</p>"},{"location":"geoprecessing/#load-package","title":"load package","text":"<pre><code>import geopandas as gpd\nfrom Godream.geobox import intersect\nfrom Godream.plotimg import overlay_map\n</code></pre>"},{"location":"geoprecessing/#intersect","title":"Intersect","text":"<pre><code>First_path = \"D:\\DGEO\\data\\square.geojson\"\nsecound_path= \"D:\\DGEO\\data\\Triangle.geojson\"\n</code></pre> <p><pre><code># display input file on interative map\nfiles=[First_path,secound_path]\noverlay_map(files, zoom=12)\n</code></pre> </p>"},{"location":"geoprecessing/#using-intersect-function","title":"Using intersect function","text":"<pre><code># input path\npaths=[First_path,secound_path]\nout_path=\"D:\\DGEO\\data\\intersect_out.geojson\"\n\n# output path\nintersect(paths, out_path)\n</code></pre>"},{"location":"geoprecessing/#output-intersect","title":"Output intersect","text":"<pre><code>#display intersect result on interative map\nresult_files = [First_path, secound_path, out_path]\n\noverlay_map(result_files)\n</code></pre>"},{"location":"geoprecessing/#clip-raster-by-vector","title":"Clip Raster by Vector","text":"<pre><code>input_path='D:\\DGEO\\data\\S2_image3.tif' # raster\nclip_path = 'D:\\DGEO\\data\\Rectan.geojson' # vector\noutput_path= 'D:\\DGEO\\data\\Raster_clip.tif'\n</code></pre> <p><pre><code># display input file on interative map\n\nfilev = [clip_path]\nfiler = [input_path]\n\noverlay_map(filev,filer)\n</code></pre> </p>"},{"location":"geoprecessing/#using-clip-function","title":"Using clip function","text":"<pre><code>from Godream.geobox import clip\n</code></pre> <pre><code>clip(input_path,clip_path, output_path)\n</code></pre>"},{"location":"geoprecessing/#output-clip-raster","title":"Output clip raster","text":"<pre><code>filer = [output_path]\n\noverlay_map(raster_file=filer, with_draw_tools=True )\n</code></pre>"},{"location":"get_started/","title":"Get Started","text":""},{"location":"get_started/#godream-geo-dream","title":"Godream (Geo-dream)","text":"<p>Godream (Geo-dream) is a library that contain geospatial tools for RS&amp;GIS analyze or geospatial analyze in python language. This appears to be a Python library specifically developed to assist in the analysis of geospatial data, with a focus on remote sensing and GIS applications. Such a library would likely provide functions and tools to manipulate, process, and visualize geospatial data, making it easier for users to perform complex analyses in these domains pypi.org.</p> <p>(How to create new environment)</p> <p>Require Python version 3.9 \u26a0\ufe0f</p> <p>Require to install GDAL  \u26a0\ufe0f</p> <p>How to install GDAL with Wheel file(.whl)</p> <p>Download GDAL Wheel file  for Python 3.9 (eg. GDAL-3.3.3-cp39-cp39-win_amd64.whl)</p>"},{"location":"get_started/#activate-your-environment","title":"Activate your environment","text":"<pre><code>conda activate 'your environment'\n</code></pre>"},{"location":"get_started/#installation","title":"Installation","text":"<pre><code>pip install Godream\n</code></pre>"},{"location":"get_started/#launch-jupyter-notebook","title":"Launch Jupyter notebook","text":"<pre><code>jupyter notebook\n</code></pre>"},{"location":"get_started/#import-libraries","title":"Import libraries","text":"<pre><code>import Godream\n</code></pre>"},{"location":"get_started/#try-to-run-first-command","title":"Try to run first command","text":""},{"location":"get_started/#import-library","title":"Import library","text":"<pre><code>from Godream.plotimg import show_map \n</code></pre>"},{"location":"get_started/#create-an-intercative-map","title":"Create an intercative map","text":"<pre><code>show_map()\n</code></pre> Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"rice_model/","title":"Rice Detect","text":""},{"location":"rice_model/#import-package","title":"Import package","text":"<pre><code>import rasterio\nfrom Godream.plotimg import overlay_map\nfrom Godream.model import riceByOptical, riceBySar\n</code></pre>"},{"location":"rice_model/#for-optical-image","title":"For Optical image","text":"<p>Your satellite image bands have to set the order of bands like this: </p> <p><code>band_1</code> as red band</p> <p><code>band_2</code> as green band</p> <p><code>band_3</code> as blue band</p> <p><code>band_4</code> as nir band</p> <pre><code>#set input\ntrainset = 'data/trainset_DN.geojson'\nraster_img = \"data/S2_image3.tif\"\noutput_tiff = 'classified_S2.tiff'\n</code></pre> <pre><code># visualize input\nfilev = [trainset]\nfiler = [raster_img]\noverlay_map( filev, filer, with_draw_tools=True,zoom=None )\n</code></pre> <p></p>"},{"location":"rice_model/#optical-rice-model","title":"Optical rice model","text":"<p>Raster images should have 4 bands that compose of red, green, blue and nir bands respectively.</p> <pre><code>riceByOptical(raster_img, output_tiff, figsize = (12, 7), num_estimator = 100)\n</code></pre> <p></p>"},{"location":"rice_model/#for-sar-image","title":"For SAR image","text":"<pre><code># set input parameter\nraster_stack = \"D:\\DGEO\\myDATA\\VH_stack.tif\" # SAR_VH stack 19 images\noutput_tiff = 'classified.tiff'\n</code></pre>"},{"location":"rice_model/#sar-rice-model","title":"SAR rice model","text":"<p>This model uses time series data of SAR VH polarization to run the model. Thus, input data should be stack 19 images of SAR VH polarization images.</p> <pre><code>riceBySar(raster_stack, output_tiff, figsize = (12, 7), num_estimator = 100 )\n</code></pre> <p></p>"}]}